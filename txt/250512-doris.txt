Apache Doris是一款基于MPP架构的高性能、实时分析型数据库。既能支持高并发的点查询场景，也能支持高吞吐的复杂分析场景。

===
MPP：即大规模并行处理 Massively Parallel Processing，是一种将任务并行地分散到多个处理器或服务器上执行的技术架构，在数据库领域应用广泛。

架构特点：
- 共享无关性：每个处理单元有自己独立的磁盘存储和内存，不共享资源，避免了资源争用，提高并发处理能力。
- 高可扩展性：可通过增加处理节点线性提升系统处理能力和存储容量，轻松应对数据量和业务增长。
- 并行处理：将大型任务分解成多个子任务，分配给不同节点并行处理，缩短整体处理时间。

工作原理：
- 数据分布：数据按一定规则（如哈希、范围等）分散存储在不同节点上，保证数据均匀分布，避免热点问题。
- 任务分配：协调节点接收用户请求，将任务分解为多个子任务，根据数据分布情况分给相应计算节点。
- 并行计算：各计算节点独立处理分配到的子任务，并行执行计算。
- 结果合并：计算集结点完成子任务后，将结果返回协调节点，协调节点对结果进行合并和汇总，返回给用户。

优点：
- 能处理海量数据，处理速度快。
- 可通过增加节点线性扩展性能。
- 高可用性，部分节点故障不影响系统整体运行。

缺点：
- 系统复杂，搭建和维护成本高。
- 节点间通信和数据传输开销大，可能影响性能。
- 对分布式事务支持较弱。

===

Apache Doris存算一提架构精简且易于维护。它包含以下两种类型的进程：
- Frontend(FE): 主要负责接收用户请求、查询解析和规划、元数据管理以及节点管理。
- Backend(BE): 主要负责数据存储和查询计划的执行。数据会被切分成数据分片（Shard），在BE中以多副本方式存储。

在生产环境中，可以部署多个FE节点以实现容灾备份。每个FE节点都会维护完整的元数据。
FE节点分为以下三种角色：
- Master：负责元数据的读写。元数据发生变更后，会通过BDB JE协议同步给Follower或Observer节点。
- Follower：负责读取元数据。当Master节点发生故障时，可以选取一个Follower节点作为新的Master节点。
- Observer：负责读取元数据，主要目的是增加集群的查询并发能力，不参与集群的选主过程。

FE和BE进程都可以横向扩张。FE和BE进程通过一致性协议来保证服务的高可用性和数据高可靠性。存算一体架构高度集成，大幅降低了分布式系统的运维成本。

===
存算一体架构是一种将存储与计算深度融合的新型架构设计

===

Apache Doris核心特性：
- 高可用：元数据和数据均采用多副本存储，并通过Quorum协议同步数据日志。当大多数副本完成写入后，即认为数据写入成功，从而确保即使少数节点发生故障，集群仍能保持可用性。
- 高兼容
- 实时数仓：依靠向量化引擎、MPP及Pipeline执行引擎等加速手段，可以提供亚秒级数据查询能力，从而构建高性能、低延迟的实时数仓平台。
- 湖仓一体：可基于外部数据源构建湖仓一体架构，从而解决数据在数据湖和数据仓库之间无缝集成和自由流动的问题，帮助用户直接利用数据仓库的能力来解决数据湖中的数据分析问题，同时充分利用数据湖的数据管理能力来提升数据的价值。
- 灵活建模：提供多种建模方式。

