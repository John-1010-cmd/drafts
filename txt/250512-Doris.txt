Apache Doris是一款基于MPP架构的高性能、实时分析型数据库。既能支持高并发的点查询场景，也能支持高吞吐的复杂分析场景。

===
MPP：即大规模并行处理 Massively Parallel Processing，是一种将任务并行地分散到多个处理器或服务器上执行的技术架构，在数据库领域应用广泛。

架构特点：
- 共享无关性：每个处理单元有自己独立的磁盘存储和内存，不共享资源，避免了资源争用，提高并发处理能力。
- 高可扩展性：可通过增加处理节点线性提升系统处理能力和存储容量，轻松应对数据量和业务增长。
- 并行处理：将大型任务分解成多个子任务，分配给不同节点并行处理，缩短整体处理时间。

工作原理：
- 数据分布：数据按一定规则（如哈希、范围等）分散存储在不同节点上，保证数据均匀分布，避免热点问题。
- 任务分配：协调节点接收用户请求，将任务分解为多个子任务，根据数据分布情况分给相应计算节点。
- 并行计算：各计算节点独立处理分配到的子任务，并行执行计算。
- 结果合并：计算集结点完成子任务后，将结果返回协调节点，协调节点对结果进行合并和汇总，返回给用户。

优点：
- 能处理海量数据，处理速度快。
- 可通过增加节点线性扩展性能。
- 高可用性，部分节点故障不影响系统整体运行。

缺点：
- 系统复杂，搭建和维护成本高。
- 节点间通信和数据传输开销大，可能影响性能。
- 对分布式事务支持较弱。

===

Apache Doris存算一提架构精简且易于维护。它包含以下两种类型的进程：
- Frontend(FE): 主要负责接收用户请求、查询解析和规划、元数据管理以及节点管理。
- Backend(BE): 主要负责数据存储和查询计划的执行。数据会被切分成数据分片（Shard），在BE中以多副本方式存储。

在生产环境中，可以部署多个FE节点以实现容灾备份。每个FE节点都会维护完整的元数据。
FE节点分为以下三种角色：
- Master：负责元数据的读写。元数据发生变更后，会通过BDB JE协议同步给Follower或Observer节点。
- Follower：负责读取元数据。当Master节点发生故障时，可以选取一个Follower节点作为新的Master节点。
- Observer：负责读取元数据，主要目的是增加集群的查询并发能力，不参与集群的选主过程。

FE和BE进程都可以横向扩张。FE和BE进程通过一致性协议来保证服务的高可用性和数据高可靠性。存算一体架构高度集成，大幅降低了分布式系统的运维成本。

===
存算一体架构是一种将存储与计算深度融合的新型架构设计理念。

架构特点：
- 近距离数据交互：计算单元靠近存储单元，大大减少了数据传输的距离，降低了数据传输延迟。
- 减少数据搬运：避免了大量的数据在存储和计算之间不必要的搬运。

工作原理：
- 存储与计算单元融合：存储设备不仅仅用于存储数据，还具备一定的计算能力。
- 数据本地处理：当有数据处理需求时，数据可以在存储单元附近直接进行计算。

优点：
- 高性能：由于减少了数据传输延迟，可以显著提高处理速度。
- 低功耗：降低了数据传输过程中的能耗。
- 高带宽利用：提高了存储与计算之间的带宽利用率。

缺点：
- 技术复杂度高：实现存储和计算的深度融合需要新的硬件设计、制造工艺以及软件编程模型。
- 通用性受限：某些特定设计的存算一体架构可能只适用特定类型的计算任务，在通用性方面可能存在一定的局限性。

===

Apache Doris核心特性：
- 高可用：元数据和数据均采用多副本存储，并通过Quorum协议同步数据日志。当大多数副本完成写入后，即认为数据写入成功，从而确保即使少数节点发生故障，集群仍能保持可用性。
- 高兼容
- 实时数仓：依靠向量化引擎、MPP及Pipeline执行引擎等加速手段，可以提供亚秒级数据查询能力，从而构建高性能、低延迟的实时数仓平台。
- 湖仓一体：可基于外部数据源构建湖仓一体架构，从而解决数据在数据湖和数据仓库之间无缝集成和自由流动的问题，帮助用户直接利用数据仓库的能力来解决数据湖中的数据分析问题，同时充分利用数据湖的数据管理能力来提升数据的价值。
- 灵活建模：提供多种建模方式。

===
向量化引擎是一种优化数据处理性能的技术架构，其核心思想是通过批量处理数据，而非逐行处理，利用现代CPU的SIMD（单指令多数据流）指令集和缓存局部性原理，显著提升计算效率。

工作原理：
1. 数据组织：
- 数据以列式存储为主，每列数据连续存储在内存中，便于批量加载到CPU缓存。
- 计算时按「向量」（一组连续数据）为单位处理，而非单条记录。
2. 执行流程：
- 向量化算子：将传统逐行操作（如where age>30）转换为向量化操作（对整列年龄数据一次性比较）
- 循环展开：编译器或运行时展开循环，减少分支预测开销。
- SIMD加速：通过SIMD指令并行处理多个数据点。

优势：
- 性能提升：减少函数调用和分支预测失败。
- 资源高效：更高CPU缓存命中率，减少内存访问延迟，适合CPU密集型任务。

局限性：
1. 适用场景受限：
- 对复杂逻辑效果有限，可能需退回逐行处理。
- 写入性能可能因批量处理引入延迟。
2. 开发复杂度：
- 需重写算子逻辑为向量化形式。

===

存储引擎：
Apache Doris采用列示存储，按列进行数据的编码、压缩和读取，能够实现极高的压缩比，同时减少大量非相关数据的扫描，从而更有效的利用IO和CPU资源。

索引结构：
Apache Doris支持多种索引结构，以减少数据的扫描：
- Sorted Compound Key Index：最多可以指定三个列组成复合排序键。
- Min/Max Index：有效过滤数值类型的等值和范围查询。
- Inverted Index：能够对任意字段实现快速检索。

存储模型：
- 明细模型 Duplicate Key Model：适用于事实表的明细数据存储（保存每条原始数据记录，只进行追加数据，不更新旧数据）。
- 主键模型 Unique Key Model：保证key的唯一性，相同key的数据会被覆盖，从而实现行级别数据更新。
- 聚合模型 Aggregate Key Model：相同Key的Value列会被合并，通过提前聚合大幅提升性能（只存储聚合后的数据，节省存储空间并加速查询）。

索引分类和原理
从加速的查询和原理来看，Apache Doris的索引分为「点查索引」和「跳数索引」两大类。
- 点查索引：通过索引定位到满足where条件的有哪些行，直接读取。在满足条件的行数较少时效果很好，包括前缀索引和倒排索引。
- 点查索引-前缀索引：按排序键以有序的方式存储数据，并每隔1024行数据创建一个稀疏前缀索引，索引中的key是当前数据中第一行排序列的值。
- 点查索引-倒排索引：对创建了倒排索引的列，简历每个值到对应行号集合的倒排表。对于等值查询，先从倒排表中查到行号集合，然后直接读取对应行的数据，而不用逐行扫描匹配数据，从而较少IO加速查询。（还能加速范围过滤、文本关键词匹配）
- 跳数索引：通过索引确定不满足where条件的数据块，跳过这些数据块，只读取可能满足条件的数据块并逐行过滤，得到满足条件的数据。
- 跳数索引-ZoneMap索引：自动维护每一列的统计信息，为每一个数据文件Segment和数据块Page记录最大值、最小值、是否有NULL。
- 跳数索引-BloomFilter索引：将索引对应列的可能取值存入BloomFilter数据结构中，可以快速判断一个值是否在BloomFilter中，只支持等于。
- 跳数索引-NGramBloomFilter索引：加速文本like查询，对文本进行NGram分词，每个词作为值存入BloomFilter，只支持like加速。






